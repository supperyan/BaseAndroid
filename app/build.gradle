apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao' // apply plugin

def config = rootProject.ext.configuration
def libs = rootProject.ext.library

android {
    compileSdkVersion config.compileSdk
    buildToolsVersion config.buildToolsVersion

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdk
        targetSdkVersion config.targetSdk
        versionCode config.versionCode
        versionName config.versionName
        multiDexEnabled true

        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "0e9d9e5f428abd8b7983543a", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
    }
    sourceSets {

        main {
            //jniLibs.srcDirs = ['jniLibs']
            res.srcDir "src/main/java/com/theaty/migao/cartModule/res"
        }
    }

    signingConfigs {
        release {
            storeFile file('E:/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    dexOptions {

        javaMaxHeapSize "4g"
    }
    buildTypes {
        release {
            ndk {
                abiFilters "armeabi", "armeabi-v7a", "x86"
            }

            // minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            ndk {
                abiFilters "armeabi", "armeabi-v7a", "x86"
            }
            signingConfig signingConfigs.release
        }
    }

    dataBinding {
        enabled true
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }


}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.jakewharton:butterknife:${libs.butterknife}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${libs.butterknife}"
    //noinspection GradleCompatible
    compile "com.android.support:support-v4:${libs.supportLibrary}"
    compile "com.android.support:appcompat-v7:${libs.supportLibrary}"
    compile "com.android.support:recyclerview-v7:${libs.supportLibrary}"
    compile "com.github.bumptech.glide:glide:${libs.glide}"     //  图片加载
    annotationProcessor "com.github.bumptech.glide:compiler:${libs.glide}"      //Glide
    compile "com.google.code.gson:gson:${libs.gson}"            //  gson解析
    compile 'com.android.support:multidex:1.0.1'                //  解决65535
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'    //  网络加载框架
    compile 'org.greenrobot:eventbus:3.0.0'                     //  数据传递
    compile 'cn.jiguang.sdk:jpush:3.4.0'                        //  此处以JPush 3.1.1 版本为例。
    compile 'cn.jiguang.sdk:jcore:2.2.2'                        //  此处以JCore 1.1.9 版本为例。
    compile 'com.flyco.tablayout:FlycoTabLayout_Lib:2.1.2@aar'  //  优雅简单的TabLayout
    compile 'com.blankj:utilcode:1.25.9'                        //  工具类
    compile 'org.greenrobot:greendao:3.2.2'                     //  SQLite数据库
    testCompile 'junit:junit:4.12'
}
